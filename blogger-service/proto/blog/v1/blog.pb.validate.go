// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blog/v1/blog.proto

package blogv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBlogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBlogRequestMultiError, or nil if none found.
func (m *CreateBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for IsPublic

	if len(errors) > 0 {
		return CreateBlogRequestMultiError(errors)
	}

	return nil
}

// CreateBlogRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBlogRequestMultiError) AllErrors() []error { return m }

// CreateBlogRequestValidationError is the validation error returned by
// CreateBlogRequest.Validate if the designated constraints aren't met.
type CreateBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBlogRequestValidationError) ErrorName() string {
	return "CreateBlogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBlogRequestValidationError{}

// Validate checks the field values on CreateBlogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBlogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBlogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBlogResponseMultiError, or nil if none found.
func (m *CreateBlogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBlogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBlogResponseValidationError{
					field:  "Blog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBlogResponseValidationError{
					field:  "Blog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBlogResponseValidationError{
				field:  "Blog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBlogResponseMultiError(errors)
	}

	return nil
}

// CreateBlogResponseMultiError is an error wrapping multiple validation errors
// returned by CreateBlogResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateBlogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBlogResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBlogResponseMultiError) AllErrors() []error { return m }

// CreateBlogResponseValidationError is the validation error returned by
// CreateBlogResponse.Validate if the designated constraints aren't met.
type CreateBlogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBlogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBlogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBlogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBlogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBlogResponseValidationError) ErrorName() string {
	return "CreateBlogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBlogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBlogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBlogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBlogResponseValidationError{}

// Validate checks the field values on Blog with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Blog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlogMultiError, or nil if none found.
func (m *Blog) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlogValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlogValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlogValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for IsPublic

	// no validation rules for Likes

	// no validation rules for Views

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlogValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlogValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlogValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BlogMultiError(errors)
	}

	return nil
}

// BlogMultiError is an error wrapping multiple validation errors returned by
// Blog.ValidateAll() if the designated constraints aren't met.
type BlogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlogMultiError) AllErrors() []error { return m }

// BlogValidationError is the validation error returned by Blog.Validate if the
// designated constraints aren't met.
type BlogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlogValidationError) ErrorName() string { return "BlogValidationError" }

// Error satisfies the builtin error interface
func (e BlogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlogValidationError{}

// Validate checks the field values on BlogWithoutContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlogWithoutContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlogWithoutContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlogWithoutContentMultiError, or nil if none found.
func (m *BlogWithoutContent) ValidateAll() error {
	return m.validate(true)
}

func (m *BlogWithoutContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlogWithoutContentValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlogWithoutContentValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlogWithoutContentValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for IsPublic

	// no validation rules for Likes

	// no validation rules for Views

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BlogWithoutContentValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BlogWithoutContentValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BlogWithoutContentValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BlogWithoutContentMultiError(errors)
	}

	return nil
}

// BlogWithoutContentMultiError is an error wrapping multiple validation errors
// returned by BlogWithoutContent.ValidateAll() if the designated constraints
// aren't met.
type BlogWithoutContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlogWithoutContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlogWithoutContentMultiError) AllErrors() []error { return m }

// BlogWithoutContentValidationError is the validation error returned by
// BlogWithoutContent.Validate if the designated constraints aren't met.
type BlogWithoutContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlogWithoutContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlogWithoutContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlogWithoutContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlogWithoutContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlogWithoutContentValidationError) ErrorName() string {
	return "BlogWithoutContentValidationError"
}

// Error satisfies the builtin error interface
func (e BlogWithoutContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlogWithoutContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlogWithoutContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlogWithoutContentValidationError{}

// Validate checks the field values on GetBlogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBlogRequestMultiError,
// or nil if none found.
func (m *GetBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBlogRequestMultiError(errors)
	}

	return nil
}

// GetBlogRequestMultiError is an error wrapping multiple validation errors
// returned by GetBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogRequestMultiError) AllErrors() []error { return m }

// GetBlogRequestValidationError is the validation error returned by
// GetBlogRequest.Validate if the designated constraints aren't met.
type GetBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogRequestValidationError) ErrorName() string { return "GetBlogRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogRequestValidationError{}

// Validate checks the field values on GetBlogResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlogResponseMultiError, or nil if none found.
func (m *GetBlogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlogResponseValidationError{
					field:  "Blog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlogResponseValidationError{
					field:  "Blog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlogResponseValidationError{
				field:  "Blog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlogResponseMultiError(errors)
	}

	return nil
}

// GetBlogResponseMultiError is an error wrapping multiple validation errors
// returned by GetBlogResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBlogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogResponseMultiError) AllErrors() []error { return m }

// GetBlogResponseValidationError is the validation error returned by
// GetBlogResponse.Validate if the designated constraints aren't met.
type GetBlogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogResponseValidationError) ErrorName() string { return "GetBlogResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBlogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogResponseValidationError{}

// Validate checks the field values on ListBlogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBlogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBlogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBlogsRequestMultiError, or nil if none found.
func (m *ListBlogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBlogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return ListBlogsRequestMultiError(errors)
	}

	return nil
}

// ListBlogsRequestMultiError is an error wrapping multiple validation errors
// returned by ListBlogsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBlogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBlogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBlogsRequestMultiError) AllErrors() []error { return m }

// ListBlogsRequestValidationError is the validation error returned by
// ListBlogsRequest.Validate if the designated constraints aren't met.
type ListBlogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBlogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBlogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBlogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBlogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBlogsRequestValidationError) ErrorName() string { return "ListBlogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBlogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBlogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBlogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBlogsRequestValidationError{}

// Validate checks the field values on ListBlogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBlogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBlogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBlogsResponseMultiError, or nil if none found.
func (m *ListBlogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBlogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBlogsResponseValidationError{
						field:  fmt.Sprintf("Blogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBlogsResponseValidationError{
						field:  fmt.Sprintf("Blogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBlogsResponseValidationError{
					field:  fmt.Sprintf("Blogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBlogsResponseMultiError(errors)
	}

	return nil
}

// ListBlogsResponseMultiError is an error wrapping multiple validation errors
// returned by ListBlogsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListBlogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBlogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBlogsResponseMultiError) AllErrors() []error { return m }

// ListBlogsResponseValidationError is the validation error returned by
// ListBlogsResponse.Validate if the designated constraints aren't met.
type ListBlogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBlogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBlogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBlogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBlogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBlogsResponseValidationError) ErrorName() string {
	return "ListBlogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBlogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBlogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBlogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBlogsResponseValidationError{}

// Validate checks the field values on LikeBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeBlogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeBlogRequestMultiError, or nil if none found.
func (m *LikeBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlogId

	if len(errors) > 0 {
		return LikeBlogRequestMultiError(errors)
	}

	return nil
}

// LikeBlogRequestMultiError is an error wrapping multiple validation errors
// returned by LikeBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type LikeBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeBlogRequestMultiError) AllErrors() []error { return m }

// LikeBlogRequestValidationError is the validation error returned by
// LikeBlogRequest.Validate if the designated constraints aren't met.
type LikeBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeBlogRequestValidationError) ErrorName() string { return "LikeBlogRequestValidationError" }

// Error satisfies the builtin error interface
func (e LikeBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeBlogRequestValidationError{}

// Validate checks the field values on LikeBlogResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikeBlogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeBlogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikeBlogResponseMultiError, or nil if none found.
func (m *LikeBlogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeBlogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return LikeBlogResponseMultiError(errors)
	}

	return nil
}

// LikeBlogResponseMultiError is an error wrapping multiple validation errors
// returned by LikeBlogResponse.ValidateAll() if the designated constraints
// aren't met.
type LikeBlogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeBlogResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeBlogResponseMultiError) AllErrors() []error { return m }

// LikeBlogResponseValidationError is the validation error returned by
// LikeBlogResponse.Validate if the designated constraints aren't met.
type LikeBlogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeBlogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeBlogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeBlogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeBlogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeBlogResponseValidationError) ErrorName() string { return "LikeBlogResponseValidationError" }

// Error satisfies the builtin error interface
func (e LikeBlogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeBlogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeBlogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeBlogResponseValidationError{}

// Validate checks the field values on AddViewRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddViewRequestMultiError,
// or nil if none found.
func (m *AddViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlogId

	if len(errors) > 0 {
		return AddViewRequestMultiError(errors)
	}

	return nil
}

// AddViewRequestMultiError is an error wrapping multiple validation errors
// returned by AddViewRequest.ValidateAll() if the designated constraints
// aren't met.
type AddViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddViewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddViewRequestMultiError) AllErrors() []error { return m }

// AddViewRequestValidationError is the validation error returned by
// AddViewRequest.Validate if the designated constraints aren't met.
type AddViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddViewRequestValidationError) ErrorName() string { return "AddViewRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddViewRequestValidationError{}

// Validate checks the field values on AddViewResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddViewResponseMultiError, or nil if none found.
func (m *AddViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AddViewResponseMultiError(errors)
	}

	return nil
}

// AddViewResponseMultiError is an error wrapping multiple validation errors
// returned by AddViewResponse.ValidateAll() if the designated constraints
// aren't met.
type AddViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddViewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddViewResponseMultiError) AllErrors() []error { return m }

// AddViewResponseValidationError is the validation error returned by
// AddViewResponse.Validate if the designated constraints aren't met.
type AddViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddViewResponseValidationError) ErrorName() string { return "AddViewResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddViewResponseValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequestMultiError, or nil if none found.
func (m *AddCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlogId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddCommentRequestMultiError(errors)
	}

	return nil
}

// AddCommentRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequestMultiError) AllErrors() []error { return m }

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentResponseMultiError, or nil if none found.
func (m *AddCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCommentResponseMultiError(errors)
	}

	return nil
}

// AddCommentResponseMultiError is an error wrapping multiple validation errors
// returned by AddCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentResponseMultiError) AllErrors() []error { return m }

// AddCommentResponseValidationError is the validation error returned by
// AddCommentResponse.Validate if the designated constraints aren't met.
type AddCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentResponseValidationError) ErrorName() string {
	return "AddCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentResponseValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Author

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Likes

	for idx, item := range m.GetSubComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("SubComments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("SubComments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentValidationError{
					field:  fmt.Sprintf("SubComments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on AddSubCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSubCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSubCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSubCommentRequestMultiError, or nil if none found.
func (m *AddSubCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSubCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlogId

	// no validation rules for CommentId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddSubCommentRequestMultiError(errors)
	}

	return nil
}

// AddSubCommentRequestMultiError is an error wrapping multiple validation
// errors returned by AddSubCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddSubCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSubCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSubCommentRequestMultiError) AllErrors() []error { return m }

// AddSubCommentRequestValidationError is the validation error returned by
// AddSubCommentRequest.Validate if the designated constraints aren't met.
type AddSubCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSubCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSubCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSubCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSubCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSubCommentRequestValidationError) ErrorName() string {
	return "AddSubCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSubCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSubCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSubCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSubCommentRequestValidationError{}

// Validate checks the field values on AddSubCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSubCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSubCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSubCommentResponseMultiError, or nil if none found.
func (m *AddSubCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSubCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddSubCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddSubCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSubCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddSubCommentResponseMultiError(errors)
	}

	return nil
}

// AddSubCommentResponseMultiError is an error wrapping multiple validation
// errors returned by AddSubCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddSubCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSubCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSubCommentResponseMultiError) AllErrors() []error { return m }

// AddSubCommentResponseValidationError is the validation error returned by
// AddSubCommentResponse.Validate if the designated constraints aren't met.
type AddSubCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSubCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSubCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSubCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSubCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSubCommentResponseValidationError) ErrorName() string {
	return "AddSubCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSubCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSubCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSubCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSubCommentResponseValidationError{}

// Validate checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsRequestMultiError, or nil if none found.
func (m *GetCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlogId

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if len(errors) > 0 {
		return GetCommentsRequestMultiError(errors)
	}

	return nil
}

// GetCommentsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsRequestMultiError) AllErrors() []error { return m }

// GetCommentsRequestValidationError is the validation error returned by
// GetCommentsRequest.Validate if the designated constraints aren't met.
type GetCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsRequestValidationError) ErrorName() string {
	return "GetCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsRequestValidationError{}

// Validate checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsResponseMultiError, or nil if none found.
func (m *GetCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentsResponseMultiError(errors)
	}

	return nil
}

// GetCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsResponseMultiError) AllErrors() []error { return m }

// GetCommentsResponseValidationError is the validation error returned by
// GetCommentsResponse.Validate if the designated constraints aren't met.
type GetCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsResponseValidationError) ErrorName() string {
	return "GetCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsResponseValidationError{}

// Validate checks the field values on GetTrendingBlogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrendingBlogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrendingBlogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrendingBlogsRequestMultiError, or nil if none found.
func (m *GetTrendingBlogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrendingBlogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Timeframe

	if len(errors) > 0 {
		return GetTrendingBlogsRequestMultiError(errors)
	}

	return nil
}

// GetTrendingBlogsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTrendingBlogsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTrendingBlogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrendingBlogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrendingBlogsRequestMultiError) AllErrors() []error { return m }

// GetTrendingBlogsRequestValidationError is the validation error returned by
// GetTrendingBlogsRequest.Validate if the designated constraints aren't met.
type GetTrendingBlogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrendingBlogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrendingBlogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrendingBlogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrendingBlogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrendingBlogsRequestValidationError) ErrorName() string {
	return "GetTrendingBlogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrendingBlogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrendingBlogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrendingBlogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrendingBlogsRequestValidationError{}

// Validate checks the field values on GetTrendingBlogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrendingBlogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrendingBlogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrendingBlogsResponseMultiError, or nil if none found.
func (m *GetTrendingBlogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrendingBlogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrendingBlogsResponseValidationError{
						field:  fmt.Sprintf("Blogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrendingBlogsResponseValidationError{
						field:  fmt.Sprintf("Blogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrendingBlogsResponseValidationError{
					field:  fmt.Sprintf("Blogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrendingBlogsResponseMultiError(errors)
	}

	return nil
}

// GetTrendingBlogsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTrendingBlogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTrendingBlogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrendingBlogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrendingBlogsResponseMultiError) AllErrors() []error { return m }

// GetTrendingBlogsResponseValidationError is the validation error returned by
// GetTrendingBlogsResponse.Validate if the designated constraints aren't met.
type GetTrendingBlogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrendingBlogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrendingBlogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrendingBlogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrendingBlogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrendingBlogsResponseValidationError) ErrorName() string {
	return "GetTrendingBlogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrendingBlogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrendingBlogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrendingBlogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrendingBlogsResponseValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}
